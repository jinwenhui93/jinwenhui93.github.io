<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[关于Android NDK开发（一） - NDK 和 JNI 简介]]></title>
      <url>http://yoursite.com/2017/01/07/title-%20%E5%85%B3%E4%BA%8EAndroid%20NDK%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%20-%20NDK%20%E5%92%8C%20JNI%20%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="0x00-NDK-简介"><a href="#0x00-NDK-简介" class="headerlink" title="0x00 NDK 简介"></a>0x00 NDK 简介</h1><hr>
<h2 id="什么是Android-NDK"><a href="#什么是Android-NDK" class="headerlink" title="什么是Android NDK"></a>什么是Android NDK</h2><p><a href="https://developer.android.com/ndk/guides/index.html" target="_blank" rel="external">NDK</a>是(Native Development Kit)的缩写，也就是开发Native的套件或者说工具集合。<br>NDK提供了一系列的工具，帮助开发者快速开发C/C++的动态库(.SO文件)，并且能够自动将 so和java 应用一起打包成apk. </p>
<hr>
<h2 id="NDK存在的意义"><a href="#NDK存在的意义" class="headerlink" title="NDK存在的意义"></a>NDK存在的意义</h2><p>Android 的 SDK 是基于JAVA实现，意味着基于 SDK 进行开发的应用都必须使用JAVA语言。然而 C/C++ 与 JAVA 各有各的优点何用途，为了能支持 C/C++ 谷歌在开发初期就使其 Dalvik虚拟机支持 JNI 编程方式，也就是第三方应用的 JAVA代码完全可以通过本机的(JNI)框架来调用Native动态库里的函数(.so文件里的各种函数).</p>
<p>也就是说 因为有 NDK 和 JNI 的支持， Android平台可以实现 “JAVA + C”的这么一种编程方式。</p>
<hr>
<h2 id="为什么要用-NDK-（什么时候需要用-C）"><a href="#为什么要用-NDK-（什么时候需要用-C）" class="headerlink" title="为什么要用 NDK （什么时候需要用 C）"></a>为什么要用 NDK （什么时候需要用 C）</h2><ul>
<li>可以方便的使用现有的开源库。（大部分的开源库都是用 C/C++ 编写的）</li>
<li>提高程序的执行效率。（很多要求高性能的应用使用C开发，从而提高应用程序的执行效率）。</li>
<li>代码的保护。（apk 的 JAVA 层代码很容易被反编译，而 C/C++ 库的反汇编难度比较大）。</li>
<li>底层程序设计。（例如，应用程序不依赖 Dalvik JAVA 虚拟机 ）</li>
</ul>
<hr>
<h1 id="0x01-JNI-简介"><a href="#0x01-JNI-简介" class="headerlink" title="0x01 JNI 简介"></a>0x01 JNI 简介</h1><hr>
<h2 id="什么是-JNI"><a href="#什么是-JNI" class="headerlink" title="什么是 JNI"></a>什么是 JNI</h2><p>JNI 是一种在JAVA虚拟机控制下执行代码的标准机制。代码被编写成汇编程序或者 C/C++ 程序，并组装为动态组。也就允许了非静态绑定用法。提供了在 JAVA 平台上调用C/C++的一种途径，反之亦然。</p>
<hr>
<h2 id="JNI-的优势"><a href="#JNI-的优势" class="headerlink" title="JNI 的优势"></a>JNI 的优势</h2><p>与其它类似接口（NETSCAP JAVA 运行接口，Microsoft 的原始本地接口，COM/JAVA 接口）相比，JNI主要的竞争优势在于： </p>
<p>它在设计之初就确保了二进制的兼容性，JNI 编写的应用程序兼容性以及在某些平台上的 JAVA 虚拟机兼容性（不只 Dalvik 虚拟机 还有一般的 JAVA 虚拟机）。<br>这就是为什么 C/C++ 编译后的代码无论在任何平台上都能执行。不过一些早期版本并不支持二进制兼容。<br><img src="http://static.zybuluo.com/sweatbuffer/vpwlaexo9pe4yzv26s47dfw9/JNI.PNG" alt="JNI.PNG-100.8kB"></p>
<hr>
<h2 id="JNI-组织结构"><a href="#JNI-组织结构" class="headerlink" title="JNI 组织结构"></a>JNI 组织结构</h2><p><img src="http://static.zybuluo.com/sweatbuffer/ey0wvzv5zfr7u9bsmx1u1lan/JNI-interface.jpg" alt="JNI-interface.jpg-50kB"><br>这张 JNI 函数表的组成就像 C++ 的虚函数表。虚拟机可以运行多张函数表，举例来说，一张调试函数表，另一张是调用函数表。JNI 接口指针仅在当前线程中起作用。</p>
<p>这意味着 指针不能从一个线程进入另一个线程。 然而， 可以在不同的线程中调用本地方法。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">jdouble <span class="title">Java_pkg_Cls_f__ILjava_lang_String_2</span> <span class="params">(JNIEnv *env, jobject obj, jint i, jstring s)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">const</span> <span class="keyword">char</span> *str = (*env)-&gt;GetStringUTFChars(env, s, <span class="number">0</span>); </div><div class="line">     (*env)-&gt;ReleaseStringUTFChars(env, s, str); </div><div class="line">     <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>*env   - 一个接口指针</li>
<li>obj   - 在本地方法中声明的对象引用</li>
<li>i 和 s - 用于传递的参数</li>
</ul>
<p>原始类型（Primitive Type）在虚拟机和本机代码进行拷贝，对象之间使用引用进行传递。VM（虚拟机)要追踪所有传递给本地代码的对象引用。GC无法释放所有传递给本地代码的对象引用。与此同时，本机代码应该通知VM不需要的对象引用。</p>
<hr>
<h2 id="局部引用和全局引用"><a href="#局部引用和全局引用" class="headerlink" title="局部引用和全局引用"></a>局部引用和全局引用</h2><p>JNI 定义了三种引用类型：<strong><code>局部引用</code></strong>，<strong><code>全局引用</code></strong>和<strong><code>全局弱引用</code></strong>。</p>
<h3 id="局部引用"><a href="#局部引用" class="headerlink" title="局部引用"></a>局部引用</h3><p><code>局部引用</code>在方法完成之前是有效的。所有通过 JNI 函数返回的 JAVA 对象都是本地引用。程序员希望 VM 会清空所有的局部引用，然而局部引用尽在其创建的线程里可用。如果有必要，局部引用可以通过接口中的 <strong><code>DeletteLocalRef JNI</code></strong> 方法立即释放：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jclass clazz;</div><div class="line">clazz = (*env)-&gt;FindClass(env, <span class="string">"java/lang/String"</span>);</div><div class="line">...</div><div class="line">(*env)-&gt;DeleteLocalRef(env, clazz)</div></pre></td></tr></table></figure></p>
<h3 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h3><p><code>全局引用</code>在完全释放之前都是有效的。要创建一个全局引用，需要调用 <strong><code>NewGlobalRef</code></strong> 方法。如果全局引用不是必须的，可以通过 <strong><code>DeleteGlobalRef</code></strong> 方法删除：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jclass localClazz;</div><div class="line">jclass globalClazz;</div><div class="line">...</div><div class="line">localClazz = (*env)-&gt;FindClass(env, <span class="string">"java/lang/String"</span>);</div><div class="line">globalClazz = (*env)-&gt;NewGlobalRef(env, localClazz);</div><div class="line">...</div><div class="line">(*env)-&gt;DeleteLocalRef(env, localClazz);</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>JNI 不会检查 <strong><code>NullPointerException</code></strong>、<strong><code>IllegalArgumentException</code></strong>这样的错误，原因是：</p>
<ul>
<li>性能下降</li>
<li>在绝大多数 C 的库函数中，很难避免错误发生。</li>
</ul>
<p>JNI 允许用户使用 JAVA 异常处理。 大部分 JNI 方法会返回错误代码 但是本身并不会报出异常。因此，很有必要再代码本身进行处理，将异常抛给 JAVA。</p>
<p>在 JNI 内部，首先会检查调用函数返回的错误代码，之后会调用 <strong><code>ExpertOccurred()</code></strong> 返回一个错误对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">jthrowable <span class="title">ExceptionOccurred</span><span class="params">(JNIEnv *env)</span></span>;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="JNI-原始类型"><a href="#JNI-原始类型" class="headerlink" title="JNI 原始类型"></a>JNI 原始类型</h2><p>JNI 有自己的原始数据类型和数据引用类型。</p>
<table>
<thead>
<tr>
<th style="text-align:center">JAVA类型</th>
<th style="text-align:center">本地类型（JNI）</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">boolean（布尔型）</td>
<td style="text-align:center">jboolean</td>
<td style="text-align:center">无符号 8 bit</td>
</tr>
<tr>
<td style="text-align:center">byte(字节型)</td>
<td style="text-align:center">jbyte</td>
<td style="text-align:center">有符号 8 bit</td>
</tr>
<tr>
<td style="text-align:center">char（字符型）</td>
<td style="text-align:center">jchar</td>
<td style="text-align:center">无符号 16 bit</td>
</tr>
<tr>
<td style="text-align:center">short（短整型）</td>
<td style="text-align:center">jshort</td>
<td style="text-align:center">有符号 16 bit</td>
</tr>
<tr>
<td style="text-align:center">int（整形）</td>
<td style="text-align:center">jint</td>
<td style="text-align:center">有符号 32 bit</td>
</tr>
<tr>
<td style="text-align:center">long（长整形）</td>
<td style="text-align:center">jlong</td>
<td style="text-align:center">有符号 64 bit</td>
</tr>
<tr>
<td style="text-align:center">float（浮点型）</td>
<td style="text-align:center">jfloat</td>
<td style="text-align:center">32 bit</td>
</tr>
<tr>
<td style="text-align:center">double（双精度浮点型）</td>
<td style="text-align:center">jdouble</td>
<td style="text-align:center">64 bit</td>
</tr>
<tr>
<td style="text-align:center">void（空型）</td>
<td style="text-align:center">void</td>
<td style="text-align:center">N/A</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="JNI-引用类型"><a href="#JNI-引用类型" class="headerlink" title="JNI 引用类型"></a>JNI 引用类型</h2><p><img src="http://static.zybuluo.com/sweatbuffer/8gl6mko7omuy5gs7xwpoowi9/jni%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png" alt="jni引用类型.png-38.8kB"></p>
<hr>
<h2 id="改进的-UTF-8-编码"><a href="#改进的-UTF-8-编码" class="headerlink" title="改进的 UTF-8 编码"></a>改进的 UTF-8 编码</h2><p>JNI 使用改进的 UTF-8 来表现不同的字符串类型。JAVA 使用 UTF-16 编码。 UTF-8 编码主要适用于 C 语言， 因为他们的编码把 u000 表示为 0xc0，而不是通常的 0x00。 使用改进的字符串可以使得 只包含非空 ASCII 的字符串编码只可以用一个字节（byte）表示。</p>
<hr>
<h2 id="JNI-函数"><a href="#JNI-函数" class="headerlink" title="JNI 函数"></a>JNI 函数</h2><p>JNI 接口不仅有自己的数据集（dataset）也有自己的函数。回顾这些数据集和函数需要花费我们很多时间。可以从官方文档中找到更多信息：</p>
<p><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html" target="_blank" rel="external">JNI 官方文档入口</a></p>
<hr>
<h2 id="JNI-函数使用示例"><a href="#JNI-函数使用示例" class="headerlink" title="JNI 函数使用示例"></a>JNI 函数使用示例</h2><p>下面通过简短的例子确保你对这些资料所讲的内容有了正确的理解：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line">    ...</div><div class="line">JavaVM *jvm;</div><div class="line">JNIEnv *env;</div><div class="line">JavaVMInitArgs vm_args;</div><div class="line">JavaVMOption* options = <span class="keyword">new</span> JavaVMOption[<span class="number">1</span>];</div><div class="line">options[<span class="number">0</span>].optionString = <span class="string">"-Djava.class.path=/usr/lib/java"</span>;</div><div class="line">vm_args.version = JNI_VERSION_1_6;</div><div class="line">vm_args.nOptions = <span class="number">1</span>;</div><div class="line">vm_args.options = options;</div><div class="line">vm_args.ignoreUnrecognized = <span class="literal">false</span>;</div><div class="line">JNI_CreateJavaVM(&amp;jvm, &amp;env, &amp;vm_args);</div><div class="line"><span class="keyword">delete</span> options;</div><div class="line">jclass cls = env-&gt;FindClass(<span class="string">"Main"</span>);</div><div class="line">jmethodID mid = env-&gt;GetStaticMethodID(cls, <span class="string">"test"</span>, <span class="string">"(I)V"</span>);</div><div class="line">env-&gt;CallStaticVoidMethod(cls, mid, <span class="number">100</span>);</div><div class="line">jvm-&gt;DestroyJavaVM();</div></pre></td></tr></table></figure></p>
<p>大体来看这是一个 C 的代码 然后他应该是从 C 这边调用 JAVA ，我们逐个分析：</p>
<ul>
<li><code>JavaVM</code>           - 提供了一个接口，可以调用函数创建，删除 JAVA 虚拟机.</li>
<li><code>JNIEnv</code>           - 确保了大多数的 JNI 函数。</li>
<li><code>JavaVMInitArgs</code>   - Java 虚拟机参数</li>
<li><code>JavaVMOption</code>     - Java 虚拟机选项</li>
</ul>
<p>JNI 的 <code>_CreateJavaVM()</code> 方法初始化 JAVA 虚拟机并向 JNI 接口返回一个指针, <code>JNI_DestroyJavaVM()</code> 方法可以载入创建更好的 JAVA 虚拟机。</p>
<hr>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>内核负责管理所有在 Lniux 上运行的线程。线程通过 <code>AttachCurrentThread</code> 和 <code>AttachCurrentThreadAsDaemon</code> 函数附加到 JAVA 虚拟机。 如果线程没有被添加成功，则不能访问 JNIEnv。Android 系统不能停止 JNI 创建的线程， 即使 GC（Garbage Collection）在运行释放内存时也不行。直到调用 <code>DetachCurrentThread</code> 方法，该线程才会从 JAVA 虚拟机脱离。</p>
<hr>
<p>作者 <a href="http://weibo.com/7Seven7King7" target="_blank" rel="external">@sweatbuffer</a><br>2017 年 01月 07日    </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/01/07/Hello%20World/</url>
      <content type="html"><![CDATA[<p>说一下为什么开始写个人博客，是因为最近在逛博客的时候发现大家都好像再用hexo，所以感觉好神奇想尝一下味道。</p>
<p>第二个原因就是整理笔记的时候我就一直在想整理到网上也不错，可是一直都没动手，正好看到了hexo 所以想着试试看看。</p>
<p>感觉好神奇 静态的。渍渍渍。。。</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>http://yoursite.com/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://yoursite.com/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://yoursite.com/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>

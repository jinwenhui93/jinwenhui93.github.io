<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SweatBuffer`s Blog</title>
  <subtitle>发酵的奶酪</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sweatbuffer.com/"/>
  <updated>2017-01-11T14:14:59.000Z</updated>
  <id>http://www.sweatbuffer.com/</id>
  
  <author>
    <name>SweatBuffer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>：有关 Statistical Deobfuscation of Android Applications</title>
    <link href="http://www.sweatbuffer.com/2017/01/11/tags-%20%5B%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0,%20obfuscation,%20Android%EF%BC%8Cdeobfuscation%5D/"/>
    <id>http://www.sweatbuffer.com/2017/01/11/tags- [论文学习, obfuscation, Android，deobfuscation]/</id>
    <published>2017-01-11T14:14:59.000Z</published>
    <updated>2017-01-11T14:14:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>这篇论文提出了一个新的 恢复混淆 的方法，对象是 Android APK , 基于 概率性的’大代码’学习（probabilistic learning of large code） 的这么一种方式。</p>
<p>核心 Idea 是 通过上千种没有经过混淆的 Android软件，学习一种概率性的模型，然后利用这种模型去恢复新的，没见过的Android APK。</p>
<p>这篇文章的核心关注点是恢复 布局混淆(layout obfuscation)。<br>注：( 混淆技术分为几种：layout obfuscation（布局混淆）， Control obfuscation（控制流混淆）, Data Obfuscation（数据混淆）and Preventive Obfuscation（预防混淆）.)</p>
<h2 id="布局混淆"><a href="#布局混淆" class="headerlink" title="布局混淆"></a><strong>布局混淆</strong></h2><p>是一种曾经很流行如今也在使用但并不高深的一种混淆技术。它会重命名程序的元素，例如：classes，packages 和 methods ， 使得理解程序的代码变得困难。</p>
<p>具体的来讲 这篇论文里：</p>
<ol>
<li>在概率性的图像化模型中，词组化 Android APK的布局混淆问题 </li>
<li>用丰富的 特点集和捕获 Android setting的约束条件 举例说明这个模型，既能确保语义等价和又能维持预测的高精准性。</li>
<li>显示如何调节 有力的推理和学习算法两者的平衡去实现 总体的预测和可拓展的概率性预测。</li>
</ol>
<p>作者提出了他们的方法 用一款叫： DEGUARD 的工具， 使用它：</p>
<ol>
<li>反逆向 已经使用了非常流行的 叫做 ProGuard 的良性的，开源的布局混淆工具的软件混淆过的 APK 。</li>
<li>推测 导入的三方库的良性 APK。</li>
<li>重命名经过了混淆的Android malware元素的名字。</li>
</ol>
<p>实验结果证明 DEGUARD 实践效果非常高效：他可以恢复 79.1% 经过 ProGuard混淆过的元素名字，91.3% 经混淆的引入的第三方库。而且他在恶意软件中揭示了 处理敏感数据的 字符串解码器和类名。</p>
<hr>
 <a id="more"></a>
<h1 id="介绍（Introduction）"><a href="#介绍（Introduction）" class="headerlink" title="介绍（Introduction）"></a>介绍（Introduction）</h1><p>这篇论文提出了一种新的方法，基于概率模型恢复经过混淆的Android Application的这么一种方法。我们的方法是使用 在 公共仓库（public repositories）中存在的大量的Android程序（被称为 “Big Code”）去学习，得到强有力的能捕获没有经过 混淆 的 Android 程序的核心特征的概率模型。然后使用这个概率模型去议题一种（概率性的）恢复混淆的的提案，对于已经混淆了的 Android applications。<br>我们的方法使得多样的安全的软件变为可能。例如，我们的系统成功的恢复了经过 <figure class="highlight plain"><figcaption><span>混淆过的Android APK。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">## 焦点：布局混淆（Focus：Layout Deobufscation）</div><div class="line">这篇论文的关注点在于恢复  Android APK 的 布局混淆 。 一般的混淆技术包括其他的混淆方法（例如改变数据的表现方法，改变控制流等），布局混淆仍然保持着几乎所有的混淆工具的核心部分。</div><div class="line"></div><div class="line">在布局混淆中，程序元素的名字持有重要的语义信息，被其他的没有语义信息的标识符所替代。例如，变量名，方法名，类名。重命名这些程序元素使得分析人员读和理解程序的代码变得困难无比（-，- 比如上个学期读smali代码的时候 看到一堆a,b,c,aa,ab,ac时心情有多难过。。）同时对于很多的安全情境下（比如保护知识产权也就是防止被偷代码）也都非常有用。</div><div class="line">## 优点和挑战(Benefit and Challenges)</div><div class="line">这其中，恢复 Android apk 的布局混淆有着以下几类好处：</div><div class="line"></div><div class="line">- 它使得 安全分析师检查被 ProGuard 混淆过的 Android App变得更加简单。 </div><div class="line">- 它可以识别 Android Apk里嵌入的第三方库。</div><div class="line">- 它对于代码中某一特定的标识符可以实现自动搜索。</div><div class="line"></div><div class="line">然而，恢复布局混淆是一个难题。</div><div class="line">原因是：一旦原有的名字在程序中被移除 和 被用缩写过的标识符替代的情况下，简单的单独的孤立的检查这么一个程序来恢复原有的名字可能性很小。</div><div class="line">## 从“大代码”中的概率性学习（Probabilistic Learning from &quot;Big Code&quot;）</div><div class="line">为了解决 单独的考虑一个程序去恢复布局混淆很难的这么一个挑战，过去的几年里出现了新兴的 静态工具：从&quot;Big Code&quot;中来学习的概率模型，然后利用这个模型去面向一些难以解决的任务提供可能的解决方案。这些难以解决的任务例如：程序语言间的机械翻译(machine translation between programming languages)，静态代码合成（statistical code synthesis），and 在源代码中猜测名字，类型（predicting names and types in source code）。</div><div class="line">好玩儿的是，缘于他们独特的特性，一些概率性的系统在开发社区中快速变得流行。</div><div class="line">## 我们的工作： 通过 “大代码” 的 Android 反混淆（This work: Android Deobfuscation via &quot;Big Code&quot;）</div><div class="line">以这些优点为动机，我们针对 恢复 Android 布局混淆 提出了一种新的方法，通过“学习”数千种 易获得的，未经混淆的 Android App。</div><div class="line"></div><div class="line">技术性的来讲，我们的方法的工作机制是：把 预测被层次混淆过的标识符的名字 的问题 使用概率性图像模型分成若干 有结构的预测 。事实上，我们利用 ```Conditional Random Fields（CRFs）``` ,一个强有力的广泛应用于多种领域的模型（包括 计算机影像处理，自然语言处理）。 据我们所知，这是第一个利用 从”大代码“学习的概率图象模型 去处理核心安全类的问题。 使用我们的方法，我们提出了一个工具叫做 ```DEGUARD ```, 它可以以高预测率的自动的恢复 通过 ```ProGuard``` 层次混淆过的 Android Apk。 </div><div class="line">## 主要的贡献（Main Contributions）</div><div class="line"></div><div class="line"></div><div class="line">- 一种结构性的预测方法用来执行概率性的 Android APK的层次混淆恢复。</div><div class="line">- 能够干净的捕获 Android App 核心部分的特征和约束集。结合起来说，这些特征约束集可以确保我们的概率性预测的高预测利率和维持 App的原有语义。</div><div class="line">- 一个复杂的大规模概率性系统叫 ```DEGUARD```。</div><div class="line">- 被 ```ProGuard``` 混淆过的在 open-source 上 Android App 和 恶意 Android App 使用 ```DEGUARD``` 的评价和估值。 我们的结果显示 ```DEGUARD``` 可以恢复被 ```ProGuard```混淆过的 ```79.1%``` 的程序元素，以及识别 ```91.3%``` 使用的三方库，揭示 相关字符串编码器和恶意软件的类。</div><div class="line"></div><div class="line"></div><div class="line">---</div><div class="line"># 综述（Overview）</div><div class="line">在这一章节中我们对于 我们的 Android静态反混淆方法提出了一种非正式的综述。第一，我们讨论 ```ProGuard```，一直都很广泛被应用的 Android App 混淆工具。之后我们提出了 ```DEGUARD``` 系统的核心步骤。最后我们的目标是提供一种 关于这个方法直观上的理解。全部的正式的细节在写一个章节里讨论。</div><div class="line"></div><div class="line">## ProGuard</div><div class="line">```ProGuard``` 混淆程序的元素包括：fields名，方法名，类名，包名，通过用语义难以理解的字符串替代原有的名字。它同样移除不使用的类，field，方法去最小化输出 APK 的大小。```ProGuard``` 同样处理 app 和 程序导入的三方库。程序导入三方库所以会隐藏在发布的 APK 中。</div><div class="line"></div><div class="line">```ProGuard``` 不可以混淆所有的程序元素，因为这样会改变程序原有的语义。例如： Android API 的 方法名字和静态文件参考的类的名字，这种一旦修改就会引发引用错误等问题，会使得程序不正常运转。</div><div class="line"></div><div class="line">用一些工具比如：apktool，Dex2Jar，JavaDecompiler 可以很轻易地获得 Android代码。所以当一些函数的名字变成 ： </div><div class="line"></div><div class="line">- [ ] 支持以 PDF 格式导出文稿</div><div class="line">- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</div><div class="line">- [x] 新增 Todo 列表功能</div><div class="line">- [x] 修复 LaTex 公式渲染问题</div><div class="line">- [x] 新增 LaTex 公式编号功能</div><div class="line"></div><div class="line">### 2. 书写一个质能守恒公式[^LaTeX]</div><div class="line"></div><div class="line">$$E=mc^2$$</div><div class="line"></div><div class="line">### 3. 高亮一段代码[^code]</div><div class="line"></div><div class="line">```java</div><div class="line">a obj = new a();</div><div class="line">obj.c(str);</div></pre></td></tr></table></figure></p>
<p>就很难分析出代码的意图了，有好多啦。。。所以要看smali代码，看多了也就能看进去了。<br>值得注意的是：<code>ProGuard</code> 为了保护原有的程序语义不变 保持了一些程序的名字没有改变，例如： <code>SQLiteOpenHelper</code> 和 他的方法 <code>getWritableDatabase</code> 和 <code>rawQuery</code>，这些都是核心 Android API的一部分。</p>
<h2 id="DeGuard"><a href="#DeGuard" class="headerlink" title="DeGuard"></a>DeGuard</h2><p>todo</p>
<h3 id="Dependency-Graph"><a href="#Dependency-Graph" class="headerlink" title="Dependency Graph"></a>Dependency Graph</h3><p>todo</p>
<h3 id="Syntactic-and-Semantic-Constraints"><a href="#Syntactic-and-Semantic-Constraints" class="headerlink" title="Syntactic and Semantic Constraints"></a>Syntactic and Semantic Constraints</h3><p>todo</p>
<h3 id="Probabilistic-Prediction"><a href="#Probabilistic-Prediction" class="headerlink" title="Probabilistic Prediction"></a>Probabilistic Prediction</h3><p>todo</p>
<h2 id="Security-Applications"><a href="#Security-Applications" class="headerlink" title="Security Applications"></a>Security Applications</h2><p>todo</p>
<h2 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h2><p>todo</p>
<h2 id="Scope-and-Limitations"><a href="#Scope-and-Limitations" class="headerlink" title="Scope and Limitations"></a>Scope and Limitations</h2><p>todo</p>
<hr>
<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><p>todo</p>
<h2 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>todo</p>
<h2 id="Dependency-Graph-1"><a href="#Dependency-Graph-1" class="headerlink" title="Dependency Graph"></a>Dependency Graph</h2><p>todo</p>
<h2 id="Features-and-Weights"><a href="#Features-and-Weights" class="headerlink" title="Features and Weights"></a>Features and Weights</h2><p>todo</p>
<h2 id="Conditional-Random-Fields"><a href="#Conditional-Random-Fields" class="headerlink" title="Conditional Random Fields"></a>Conditional Random Fields</h2><p>todo</p>
<h2 id="Prediction-via-MAP-Inference"><a href="#Prediction-via-MAP-Inference" class="headerlink" title="Prediction via MAP Inference"></a>Prediction via MAP Inference</h2><p>todo</p>
<h2 id="MAP-Inference-Example"><a href="#MAP-Inference-Example" class="headerlink" title="MAP Inference Example"></a>MAP Inference Example</h2><p>todo</p>
<h2 id="Learning-from-“Big-Code”"><a href="#Learning-from-“Big-Code”" class="headerlink" title="Learning from “Big Code”"></a>Learning from “Big Code”</h2><p>todo</p>
<hr>
<h1 id="Feature-Functions"><a href="#Feature-Functions" class="headerlink" title="Feature Functions"></a>Feature Functions</h1><p>todo</p>
<h2 id="Program-Elements"><a href="#Program-Elements" class="headerlink" title="Program Elements"></a>Program Elements</h2><p>todo</p>
<h3 id="Known-and-Unknown-Program-Elements"><a href="#Known-and-Unknown-Program-Elements" class="headerlink" title="Known and Unknown Program Elements"></a>Known and Unknown Program Elements</h3><p>todo </p>
<h3 id="Grouping-Method-Nodes"><a href="#Grouping-Method-Nodes" class="headerlink" title="Grouping Method Nodes"></a>Grouping Method Nodes</h3><p>todo</p>
<h2 id="Relationships"><a href="#Relationships" class="headerlink" title="Relationships"></a>Relationships</h2><p>todo</p>
<h3 id="Method-Relationships"><a href="#Method-Relationships" class="headerlink" title="Method Relationships"></a>Method Relationships</h3><p>todo</p>
<h3 id="Structural-Relationships"><a href="#Structural-Relationships" class="headerlink" title="Structural Relationships"></a>Structural Relationships</h3><p>todo </p>
<h3 id="Comparison-to-Other-Prediction-Systems"><a href="#Comparison-to-Other-Prediction-Systems" class="headerlink" title="Comparison to Other Prediction Systems"></a>Comparison to Other Prediction Systems</h3><p>todo</p>
<h2 id="Pairwise-Feature-Functions"><a href="#Pairwise-Feature-Functions" class="headerlink" title="Pairwise Feature Functions"></a>Pairwise Feature Functions</h2><p>todo</p>
<hr>
<h1 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h1><p>todo</p>
<h2 id="Naming-Constrains-for-Methods"><a href="#Naming-Constrains-for-Methods" class="headerlink" title="Naming Constrains for Methods"></a>Naming Constrains for Methods</h2><p>todo </p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>todo</p>
<h3 id="Expressing-Method-Constraints"><a href="#Expressing-Method-Constraints" class="headerlink" title="Expressing Method Constraints"></a>Expressing Method Constraints</h3><p>todo</p>
<h3 id="Deriving-Inequality-Constrains-for-Methods"><a href="#Deriving-Inequality-Constrains-for-Methods" class="headerlink" title="Deriving Inequality Constrains for Methods"></a>Deriving Inequality Constrains for Methods</h3><p>todo</p>
<h3 id="Result-On-the-Example"><a href="#Result-On-the-Example" class="headerlink" title="Result On the Example"></a>Result On the Example</h3><p>todo</p>
<h2 id="Naming-Constrains-for-Fields-Classes-and-Packages"><a href="#Naming-Constrains-for-Fields-Classes-and-Packages" class="headerlink" title="Naming Constrains for Fields,Classes,and Packages"></a>Naming Constrains for Fields,Classes,and Packages</h2><p>todo</p>
<hr>
<h1 id="Implementation-and-Evaluation"><a href="#Implementation-and-Evaluation" class="headerlink" title="Implementation and Evaluation"></a>Implementation and Evaluation</h1><p>todo</p>
<h2 id="The-DEGUARD-System"><a href="#The-DEGUARD-System" class="headerlink" title="The DEGUARD System"></a>The DEGUARD System</h2><p>todo</p>
<h3 id="Feature-Functions-and-Weights"><a href="#Feature-Functions-and-Weights" class="headerlink" title="Feature Functions and Weights"></a>Feature Functions and Weights</h3><p>todo</p>
<h3 id="MAP-Inference"><a href="#MAP-Inference" class="headerlink" title="MAP Inference"></a>MAP Inference</h3><p>todo</p>
<h2 id="Experimental-Evaluation"><a href="#Experimental-Evaluation" class="headerlink" title="Experimental Evaluation"></a>Experimental Evaluation</h2><p>todo</p>
<h3 id="ProGuard-Experiments"><a href="#ProGuard-Experiments" class="headerlink" title="ProGuard Experiments"></a>ProGuard Experiments</h3><p>todo </p>
<h3 id="ProGuard-Obfuscated-APKs"><a href="#ProGuard-Obfuscated-APKs" class="headerlink" title="ProGuard-Obfuscated APKs"></a>ProGuard-Obfuscated APKs</h3><h3 id="Task1-Predicting-Program-Element-Names"><a href="#Task1-Predicting-Program-Element-Names" class="headerlink" title="Task1: Predicting Program Element Names."></a>Task1: Predicting Program Element Names.</h3><h3 id="Task2-Predicting-Third-party-Libraries"><a href="#Task2-Predicting-Third-party-Libraries" class="headerlink" title="Task2: Predicting Third-party Libraries."></a>Task2: Predicting Third-party Libraries.</h3><h3 id="Prediction-Speed"><a href="#Prediction-Speed" class="headerlink" title="Prediction Speed"></a>Prediction Speed</h3><h3 id="Summary-of-ProGuard-Experiments"><a href="#Summary-of-ProGuard-Experiments" class="headerlink" title="Summary of ProGuard Experiments"></a>Summary of ProGuard Experiments</h3><h2 id="Experiments-with-Malware-Samples"><a href="#Experiments-with-Malware-Samples" class="headerlink" title="Experiments with Malware Samples"></a>Experiments with Malware Samples</h2><h3 id="Revealing-Base64-String-Decoders"><a href="#Revealing-Base64-String-Decoders" class="headerlink" title="Revealing Base64 String Decoders"></a>Revealing Base64 String Decoders</h3><h3 id="Revealing-Sensitive-Data-Usage"><a href="#Revealing-Sensitive-Data-Usage" class="headerlink" title="Revealing Sensitive Data Usage"></a>Revealing Sensitive Data Usage</h3><h3 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h3><h1 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h1><h2 id="Probabilistic-models-for-programs"><a href="#Probabilistic-models-for-programs" class="headerlink" title="Probabilistic models for programs"></a>Probabilistic models for programs</h2><p>#Conclusion</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h1&gt;&lt;p&gt;这篇论文提出了一个新的 恢复混淆 的方法，对象是 Android APK , 基于 概率性的’大代码’学习（probabilistic learning of large code） 的这么一种方式。&lt;/p&gt;
&lt;p&gt;核心 Idea 是 通过上千种没有经过混淆的 Android软件，学习一种概率性的模型，然后利用这种模型去恢复新的，没见过的Android APK。&lt;/p&gt;
&lt;p&gt;这篇文章的核心关注点是恢复 布局混淆(layout obfuscation)。&lt;br&gt;注：( 混淆技术分为几种：layout obfuscation（布局混淆）， Control obfuscation（控制流混淆）, Data Obfuscation（数据混淆）and Preventive Obfuscation（预防混淆）.)&lt;/p&gt;
&lt;h2 id=&quot;布局混淆&quot;&gt;&lt;a href=&quot;#布局混淆&quot; class=&quot;headerlink&quot; title=&quot;布局混淆&quot;&gt;&lt;/a&gt;&lt;strong&gt;布局混淆&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;是一种曾经很流行如今也在使用但并不高深的一种混淆技术。它会重命名程序的元素，例如：classes，packages 和 methods ， 使得理解程序的代码变得困难。&lt;/p&gt;
&lt;p&gt;具体的来讲 这篇论文里：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在概率性的图像化模型中，词组化 Android APK的布局混淆问题 &lt;/li&gt;
&lt;li&gt;用丰富的 特点集和捕获 Android setting的约束条件 举例说明这个模型，既能确保语义等价和又能维持预测的高精准性。&lt;/li&gt;
&lt;li&gt;显示如何调节 有力的推理和学习算法两者的平衡去实现 总体的预测和可拓展的概率性预测。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者提出了他们的方法 用一款叫： DEGUARD 的工具， 使用它：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;反逆向 已经使用了非常流行的 叫做 ProGuard 的良性的，开源的布局混淆工具的软件混淆过的 APK 。&lt;/li&gt;
&lt;li&gt;推测 导入的三方库的良性 APK。&lt;/li&gt;
&lt;li&gt;重命名经过了混淆的Android malware元素的名字。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实验结果证明 DEGUARD 实践效果非常高效：他可以恢复 79.1% 经过 ProGuard混淆过的元素名字，91.3% 经混淆的引入的第三方库。而且他在恶意软件中揭示了 处理敏感数据的 字符串解码器和类名。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="论文学习" scheme="http://www.sweatbuffer.com/categories/%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="论文学习" scheme="http://www.sweatbuffer.com/tags/%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="obfuscation" scheme="http://www.sweatbuffer.com/tags/obfuscation/"/>
    
      <category term="Android，deobfuscation" scheme="http://www.sweatbuffer.com/tags/Android%EF%BC%8Cdeobfuscation/"/>
    
  </entry>
  
  <entry>
    <title>关于Android NDK开发（一） - NDK 和 JNI 简介</title>
    <link href="http://www.sweatbuffer.com/2017/01/11/ndk%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.sweatbuffer.com/2017/01/11/ndk简介/</id>
    <published>2017-01-11T00:57:55.000Z</published>
    <updated>2017-01-11T00:57:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-NDK-简介"><a href="#0x00-NDK-简介" class="headerlink" title="0x00 NDK 简介"></a>0x00 NDK 简介</h1><hr>
<h2 id="什么是Android-NDK"><a href="#什么是Android-NDK" class="headerlink" title="什么是Android NDK"></a>什么是Android NDK</h2><p><a href="https://developer.android.com/ndk/guides/index.html" target="_blank" rel="external">NDK</a>是(Native Development Kit)的缩写，也就是开发Native的套件或者说工具集合。<br>NDK提供了一系列的工具，帮助开发者快速开发C/C++的动态库(.SO文件)，并且能够自动将 so和java 应用一起打包成apk. </p>
<hr>
<h2 id="NDK存在的意义"><a href="#NDK存在的意义" class="headerlink" title="NDK存在的意义"></a>NDK存在的意义</h2><p>Android 的 SDK 是基于JAVA实现，意味着基于 SDK 进行开发的应用都必须使用JAVA语言。然而 C/C++ 与 JAVA 各有各的优点何用途，为了能支持 C/C++ 谷歌在开发初期就使其 Dalvik虚拟机支持 JNI 编程方式，也就是第三方应用的 JAVA代码完全可以通过本机的(JNI)框架来调用Native动态库里的函数(.so文件里的各种函数).</p>
<p>也就是说 因为有 NDK 和 JNI 的支持， Android平台可以实现 “JAVA + C”的这么一种编程方式。</p>
<hr>
<h2 id="为什么要用-NDK-（什么时候需要用-C）"><a href="#为什么要用-NDK-（什么时候需要用-C）" class="headerlink" title="为什么要用 NDK （什么时候需要用 C）"></a>为什么要用 NDK （什么时候需要用 C）</h2><ul>
<li>可以方便的使用现有的开源库。（大部分的开源库都是用 C/C++ 编写的）</li>
<li>提高程序的执行效率。（很多要求高性能的应用使用C开发，从而提高应用程序的执行效率）。</li>
<li>代码的保护。（apk 的 JAVA 层代码很容易被反编译，而 C/C++ 库的反汇编难度比较大）。</li>
<li>底层程序设计。（例如，应用程序不依赖 Dalvik JAVA 虚拟机 ）</li>
</ul>
<hr>
<h1 id="0x01-JNI-简介"><a href="#0x01-JNI-简介" class="headerlink" title="0x01 JNI 简介"></a>0x01 JNI 简介</h1><hr>
<a id="more"></a>
<h2 id="什么是-JNI"><a href="#什么是-JNI" class="headerlink" title="什么是 JNI"></a>什么是 JNI</h2><p>JNI 是一种在JAVA虚拟机控制下执行代码的标准机制。代码被编写成汇编程序或者 C/C++ 程序，并组装为动态组。也就允许了非静态绑定用法。提供了在 JAVA 平台上调用C/C++的一种途径，反之亦然。</p>
<hr>
<h2 id="JNI-的优势"><a href="#JNI-的优势" class="headerlink" title="JNI 的优势"></a>JNI 的优势</h2><p>与其它类似接口（NETSCAP JAVA 运行接口，Microsoft 的原始本地接口，COM/JAVA 接口）相比，JNI主要的竞争优势在于： </p>
<p>它在设计之初就确保了二进制的兼容性，JNI 编写的应用程序兼容性以及在某些平台上的 JAVA 虚拟机兼容性（不只 Dalvik 虚拟机 还有一般的 JAVA 虚拟机）。<br>这就是为什么 C/C++ 编译后的代码无论在任何平台上都能执行。不过一些早期版本并不支持二进制兼容。<br><img src="http://static.zybuluo.com/sweatbuffer/vpwlaexo9pe4yzv26s47dfw9/JNI.PNG" alt="JNI.PNG-100.8kB"></p>
<hr>
<h2 id="JNI-组织结构"><a href="#JNI-组织结构" class="headerlink" title="JNI 组织结构"></a>JNI 组织结构</h2><p><img src="http://static.zybuluo.com/sweatbuffer/ey0wvzv5zfr7u9bsmx1u1lan/JNI-interface.jpg" alt="JNI-interface.jpg-50kB"><br>这张 JNI 函数表的组成就像 C++ 的虚函数表。虚拟机可以运行多张函数表，举例来说，一张调试函数表，另一张是调用函数表。JNI 接口指针仅在当前线程中起作用。</p>
<p>这意味着 指针不能从一个线程进入另一个线程。 然而， 可以在不同的线程中调用本地方法。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">jdouble <span class="title">Java_pkg_Cls_f__ILjava_lang_String_2</span> <span class="params">(JNIEnv *env, jobject obj, jint i, jstring s)</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">const</span> <span class="keyword">char</span> *str = (*env)-&gt;GetStringUTFChars(env, s, <span class="number">0</span>); </div><div class="line">     (*env)-&gt;ReleaseStringUTFChars(env, s, str); </div><div class="line">     <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>*env   - 一个接口指针</li>
<li>obj   - 在本地方法中声明的对象引用</li>
<li>i 和 s - 用于传递的参数</li>
</ul>
<p>原始类型（Primitive Type）在虚拟机和本机代码进行拷贝，对象之间使用引用进行传递。VM（虚拟机)要追踪所有传递给本地代码的对象引用。GC无法释放所有传递给本地代码的对象引用。与此同时，本机代码应该通知VM不需要的对象引用。</p>
<hr>
<h2 id="局部引用和全局引用"><a href="#局部引用和全局引用" class="headerlink" title="局部引用和全局引用"></a>局部引用和全局引用</h2><p>JNI 定义了三种引用类型：<strong><code>局部引用</code></strong>，<strong><code>全局引用</code></strong>和<strong><code>全局弱引用</code></strong>。</p>
<h3 id="局部引用"><a href="#局部引用" class="headerlink" title="局部引用"></a>局部引用</h3><p><code>局部引用</code>在方法完成之前是有效的。所有通过 JNI 函数返回的 JAVA 对象都是本地引用。程序员希望 VM 会清空所有的局部引用，然而局部引用尽在其创建的线程里可用。如果有必要，局部引用可以通过接口中的 <strong><code>DeletteLocalRef JNI</code></strong> 方法立即释放：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jclass clazz;</div><div class="line">clazz = (*env)-&gt;FindClass(env, <span class="string">"java/lang/String"</span>);</div><div class="line">...</div><div class="line">(*env)-&gt;DeleteLocalRef(env, clazz)</div></pre></td></tr></table></figure></p>
<h3 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h3><p><code>全局引用</code>在完全释放之前都是有效的。要创建一个全局引用，需要调用 <strong><code>NewGlobalRef</code></strong> 方法。如果全局引用不是必须的，可以通过 <strong><code>DeleteGlobalRef</code></strong> 方法删除：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jclass localClazz;</div><div class="line">jclass globalClazz;</div><div class="line">...</div><div class="line">localClazz = (*env)-&gt;FindClass(env, <span class="string">"java/lang/String"</span>);</div><div class="line">globalClazz = (*env)-&gt;NewGlobalRef(env, localClazz);</div><div class="line">...</div><div class="line">(*env)-&gt;DeleteLocalRef(env, localClazz);</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>JNI 不会检查 <strong><code>NullPointerException</code></strong>、<strong><code>IllegalArgumentException</code></strong>这样的错误，原因是：</p>
<ul>
<li>性能下降</li>
<li>在绝大多数 C 的库函数中，很难避免错误发生。</li>
</ul>
<p>JNI 允许用户使用 JAVA 异常处理。 大部分 JNI 方法会返回错误代码 但是本身并不会报出异常。因此，很有必要再代码本身进行处理，将异常抛给 JAVA。</p>
<p>在 JNI 内部，首先会检查调用函数返回的错误代码，之后会调用 <strong><code>ExpertOccurred()</code></strong> 返回一个错误对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">jthrowable <span class="title">ExceptionOccurred</span><span class="params">(JNIEnv *env)</span></span>;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="JNI-原始类型"><a href="#JNI-原始类型" class="headerlink" title="JNI 原始类型"></a>JNI 原始类型</h2><p>JNI 有自己的原始数据类型和数据引用类型。</p>
<table>
<thead>
<tr>
<th style="text-align:center">JAVA类型</th>
<th style="text-align:center">本地类型（JNI）</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">boolean（布尔型）</td>
<td style="text-align:center">jboolean</td>
<td style="text-align:center">无符号 8 bit</td>
</tr>
<tr>
<td style="text-align:center">byte(字节型)</td>
<td style="text-align:center">jbyte</td>
<td style="text-align:center">有符号 8 bit</td>
</tr>
<tr>
<td style="text-align:center">char（字符型）</td>
<td style="text-align:center">jchar</td>
<td style="text-align:center">无符号 16 bit</td>
</tr>
<tr>
<td style="text-align:center">short（短整型）</td>
<td style="text-align:center">jshort</td>
<td style="text-align:center">有符号 16 bit</td>
</tr>
<tr>
<td style="text-align:center">int（整形）</td>
<td style="text-align:center">jint</td>
<td style="text-align:center">有符号 32 bit</td>
</tr>
<tr>
<td style="text-align:center">long（长整形）</td>
<td style="text-align:center">jlong</td>
<td style="text-align:center">有符号 64 bit</td>
</tr>
<tr>
<td style="text-align:center">float（浮点型）</td>
<td style="text-align:center">jfloat</td>
<td style="text-align:center">32 bit</td>
</tr>
<tr>
<td style="text-align:center">double（双精度浮点型）</td>
<td style="text-align:center">jdouble</td>
<td style="text-align:center">64 bit</td>
</tr>
<tr>
<td style="text-align:center">void（空型）</td>
<td style="text-align:center">void</td>
<td style="text-align:center">N/A</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="JNI-引用类型"><a href="#JNI-引用类型" class="headerlink" title="JNI 引用类型"></a>JNI 引用类型</h2><p><img src="http://static.zybuluo.com/sweatbuffer/8gl6mko7omuy5gs7xwpoowi9/jni%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png" alt="jni引用类型.png-38.8kB"></p>
<hr>
<h2 id="改进的-UTF-8-编码"><a href="#改进的-UTF-8-编码" class="headerlink" title="改进的 UTF-8 编码"></a>改进的 UTF-8 编码</h2><p>JNI 使用改进的 UTF-8 来表现不同的字符串类型。JAVA 使用 UTF-16 编码。 UTF-8 编码主要适用于 C 语言， 因为他们的编码把 u000 表示为 0xc0，而不是通常的 0x00。 使用改进的字符串可以使得 只包含非空 ASCII 的字符串编码只可以用一个字节（byte）表示。</p>
<hr>
<h2 id="JNI-函数"><a href="#JNI-函数" class="headerlink" title="JNI 函数"></a>JNI 函数</h2><p>JNI 接口不仅有自己的数据集（dataset）也有自己的函数。回顾这些数据集和函数需要花费我们很多时间。可以从官方文档中找到更多信息：</p>
<p><a href="http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/functions.html" target="_blank" rel="external">JNI 官方文档入口</a></p>
<hr>
<h2 id="JNI-函数使用示例"><a href="#JNI-函数使用示例" class="headerlink" title="JNI 函数使用示例"></a>JNI 函数使用示例</h2><p>下面通过简短的例子确保你对这些资料所讲的内容有了正确的理解：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line">    ...</div><div class="line">JavaVM *jvm;</div><div class="line">JNIEnv *env;</div><div class="line">JavaVMInitArgs vm_args;</div><div class="line">JavaVMOption* options = <span class="keyword">new</span> JavaVMOption[<span class="number">1</span>];</div><div class="line">options[<span class="number">0</span>].optionString = <span class="string">"-Djava.class.path=/usr/lib/java"</span>;</div><div class="line">vm_args.version = JNI_VERSION_1_6;</div><div class="line">vm_args.nOptions = <span class="number">1</span>;</div><div class="line">vm_args.options = options;</div><div class="line">vm_args.ignoreUnrecognized = <span class="literal">false</span>;</div><div class="line">JNI_CreateJavaVM(&amp;jvm, &amp;env, &amp;vm_args);</div><div class="line"><span class="keyword">delete</span> options;</div><div class="line">jclass cls = env-&gt;FindClass(<span class="string">"Main"</span>);</div><div class="line">jmethodID mid = env-&gt;GetStaticMethodID(cls, <span class="string">"test"</span>, <span class="string">"(I)V"</span>);</div><div class="line">env-&gt;CallStaticVoidMethod(cls, mid, <span class="number">100</span>);</div><div class="line">jvm-&gt;DestroyJavaVM();</div></pre></td></tr></table></figure></p>
<p>大体来看这是一个 C 的代码 然后他应该是从 C 这边调用 JAVA ，我们逐个分析：</p>
<ul>
<li><code>JavaVM</code>           - 提供了一个接口，可以调用函数创建，删除 JAVA 虚拟机.</li>
<li><code>JNIEnv</code>           - 确保了大多数的 JNI 函数。</li>
<li><code>JavaVMInitArgs</code>   - Java 虚拟机参数</li>
<li><code>JavaVMOption</code>     - Java 虚拟机选项</li>
</ul>
<p>JNI 的 <code>_CreateJavaVM()</code> 方法初始化 JAVA 虚拟机并向 JNI 接口返回一个指针, <code>JNI_DestroyJavaVM()</code> 方法可以载入创建更好的 JAVA 虚拟机。</p>
<hr>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>内核负责管理所有在 Lniux 上运行的线程。线程通过 <code>AttachCurrentThread</code> 和 <code>AttachCurrentThreadAsDaemon</code> 函数附加到 JAVA 虚拟机。 如果线程没有被添加成功，则不能访问 JNIEnv。Android 系统不能停止 JNI 创建的线程， 即使 GC（Garbage Collection）在运行释放内存时也不行。直到调用 <code>DetachCurrentThread</code> 方法，该线程才会从 JAVA 虚拟机脱离。</p>
<hr>
<p>作者 <a href="http://weibo.com/7Seven7King7" target="_blank" rel="external">@sweatbuffer</a><br>2017 年 01月 07日    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-NDK-简介&quot;&gt;&lt;a href=&quot;#0x00-NDK-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 NDK 简介&quot;&gt;&lt;/a&gt;0x00 NDK 简介&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;什么是Android-NDK&quot;&gt;&lt;a href=&quot;#什么是Android-NDK&quot; class=&quot;headerlink&quot; title=&quot;什么是Android NDK&quot;&gt;&lt;/a&gt;什么是Android NDK&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.com/ndk/guides/index.html&quot;&gt;NDK&lt;/a&gt;是(Native Development Kit)的缩写，也就是开发Native的套件或者说工具集合。&lt;br&gt;NDK提供了一系列的工具，帮助开发者快速开发C/C++的动态库(.SO文件)，并且能够自动将 so和java 应用一起打包成apk. &lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;NDK存在的意义&quot;&gt;&lt;a href=&quot;#NDK存在的意义&quot; class=&quot;headerlink&quot; title=&quot;NDK存在的意义&quot;&gt;&lt;/a&gt;NDK存在的意义&lt;/h2&gt;&lt;p&gt;Android 的 SDK 是基于JAVA实现，意味着基于 SDK 进行开发的应用都必须使用JAVA语言。然而 C/C++ 与 JAVA 各有各的优点何用途，为了能支持 C/C++ 谷歌在开发初期就使其 Dalvik虚拟机支持 JNI 编程方式，也就是第三方应用的 JAVA代码完全可以通过本机的(JNI)框架来调用Native动态库里的函数(.so文件里的各种函数).&lt;/p&gt;
&lt;p&gt;也就是说 因为有 NDK 和 JNI 的支持， Android平台可以实现 “JAVA + C”的这么一种编程方式。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;为什么要用-NDK-（什么时候需要用-C）&quot;&gt;&lt;a href=&quot;#为什么要用-NDK-（什么时候需要用-C）&quot; class=&quot;headerlink&quot; title=&quot;为什么要用 NDK （什么时候需要用 C）&quot;&gt;&lt;/a&gt;为什么要用 NDK （什么时候需要用 C）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以方便的使用现有的开源库。（大部分的开源库都是用 C/C++ 编写的）&lt;/li&gt;
&lt;li&gt;提高程序的执行效率。（很多要求高性能的应用使用C开发，从而提高应用程序的执行效率）。&lt;/li&gt;
&lt;li&gt;代码的保护。（apk 的 JAVA 层代码很容易被反编译，而 C/C++ 库的反汇编难度比较大）。&lt;/li&gt;
&lt;li&gt;底层程序设计。（例如，应用程序不依赖 Dalvik JAVA 虚拟机 ）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;0x01-JNI-简介&quot;&gt;&lt;a href=&quot;#0x01-JNI-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 JNI 简介&quot;&gt;&lt;/a&gt;0x01 JNI 简介&lt;/h1&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="Android安全" scheme="http://www.sweatbuffer.com/categories/Android%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Android" scheme="http://www.sweatbuffer.com/tags/Android/"/>
    
      <category term="NDK" scheme="http://www.sweatbuffer.com/tags/NDK/"/>
    
      <category term="JNI" scheme="http://www.sweatbuffer.com/tags/JNI/"/>
    
      <category term="Security" scheme="http://www.sweatbuffer.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>生病了，2017第一场病</title>
    <link href="http://www.sweatbuffer.com/2017/01/10/%E7%94%9F%E7%97%85/"/>
    <id>http://www.sweatbuffer.com/2017/01/10/生病/</id>
    <published>2017-01-10T04:20:16.000Z</published>
    <updated>2017-01-10T04:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="难受。。。昨天从下午四点开始就感觉不消化，难受。忍到了6点跟博士请假回家休养。。然后1点开始-像开了阀门的水龙头一样的在往外脱水。。。。。。。。好像好久都没这样拉肚子过了。。。。也可能是以前积攒的很多，一下再爆发力。。。"><a href="#难受。。。昨天从下午四点开始就感觉不消化，难受。忍到了6点跟博士请假回家休养。。然后1点开始-像开了阀门的水龙头一样的在往外脱水。。。。。。。。好像好久都没这样拉肚子过了。。。。也可能是以前积攒的很多，一下再爆发力。。。" class="headerlink" title="难受。。。昨天从下午四点开始就感觉不消化，难受。忍到了6点跟博士请假回家休养。。然后1点开始 像开了阀门的水龙头一样的在往外脱水。。。。。。。。好像好久都没这样拉肚子过了。。。。也可能是以前积攒的很多，一下再爆发力。。。"></a>难受。。。昨天从下午四点开始就感觉不消化，难受。忍到了6点跟博士请假回家休养。。然后1点开始 像开了阀门的水龙头一样的在往外脱水。。。。。。。。好像好久都没这样拉肚子过了。。。。也可能是以前积攒的很多，一下再爆发力。。。</h2><hr>
<h2 id="病从口入嘛-新的一年我要打理好自己的身体。。。健健康康的。。。生病的时候心里比较脆弱。。。比较难受"><a href="#病从口入嘛-新的一年我要打理好自己的身体。。。健健康康的。。。生病的时候心里比较脆弱。。。比较难受" class="headerlink" title="病从口入嘛 新的一年我要打理好自己的身体。。。健健康康的。。。生病的时候心里比较脆弱。。。比较难受"></a>病从口入嘛 新的一年我要打理好自己的身体。。。健健康康的。。。生病的时候心里比较脆弱。。。比较难受</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;难受。。。昨天从下午四点开始就感觉不消化，难受。忍到了6点跟博士请假回家休养。。然后1点开始-像开了阀门的水龙头一样的在往外脱水。。。。。。。。好像好久都没这样拉肚子过了。。。。也可能是以前积攒的很多，一下再爆发力。。。&quot;&gt;&lt;a href=&quot;#难受。。。昨天从下午
    
    </summary>
    
      <category term="个人日志" scheme="http://www.sweatbuffer.com/categories/%E4%B8%AA%E4%BA%BA%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="生病" scheme="http://www.sweatbuffer.com/tags/%E7%94%9F%E7%97%85/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.sweatbuffer.com/2017/01/07/Hello%20World/"/>
    <id>http://www.sweatbuffer.com/2017/01/07/Hello World/</id>
    <published>2017-01-07T04:36:07.000Z</published>
    <updated>2017-01-07T04:36:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>说一下为什么开始写个人博客，是因为最近在逛博客的时候发现大家都好像再用hexo，所以感觉好神奇想尝一下味道。</p>
<p>第二个原因就是整理笔记的时候我就一直在想整理到网上也不错，可是一直都没动手，正好看到了hexo 所以想着试试看看。</p>
<p>感觉好神奇 静态的。渍渍渍。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说一下为什么开始写个人博客，是因为最近在逛博客的时候发现大家都好像再用hexo，所以感觉好神奇想尝一下味道。&lt;/p&gt;
&lt;p&gt;第二个原因就是整理笔记的时候我就一直在想整理到网上也不错，可是一直都没动手，正好看到了hexo 所以想着试试看看。&lt;/p&gt;
&lt;p&gt;感觉好神奇 静态的。
    
    </summary>
    
    
  </entry>
  
</feed>
